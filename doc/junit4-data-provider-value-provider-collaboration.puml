@startuml
participant "JVM\nJUnit\nRuntime" as JVM
participant "DataProviderRunner" as DPR
participant "Test A" as T_A
participant "VPClassRule\n(Test A)" as VPF_CR_A #lightblue
participant "VPRule\n(Test A)" as VPF_MR_A #lightblue
participant "Test B" as T_B
participant "VPClassRule\n(Test B)" as VPF_CR_B #lightblue
participant "VPRule\n(Test B)" as VPF_MR_B #lightblue
participant "ValueProviderFactory" as VPF
note over VPF: Just shown for single thread,\nimplemented as ThreadLocal\nfor parallel test execution
participant "DefaultInitializationCreator" as D_VPC
note over D_VPC: 1. Uses arbitrary/random seed\n2. Does NOT ensure unique suffixes
participant "TestClassInitializationCreator\n(Test A)" as C_VPC_A
participant "TestClassInitializationCreator\n(Test B)" as C_VPC_B
participant "TestMethodInitializationCreator" as M_VPC
note over C_VPC_A, M_VPC: 1. Seed and reference date/time\n    controllable via system properties\n2. Ensures unique suffixes\n    (as far as possible)

JVM --> VPF : class-loading & instantiation
activate VPF
VPF -> D_VPC : instantiation
activate D_VPC
VPF -> M_VPC : instantiation
activate M_VPC
VPF -> VPF : activateCreator(DefaultInitializationCreator)

== DataProviderRunner test discovery ==
DPR -> T_A : class loading and\nexecution of @DataProvider methods
T_A -> VPF_CR_A : instantiation
activate VPF_CR_A #lightblue
VPF_CR_A -> VPF : startTestClassCycle
VPF -> C_VPC_A : instantiation
activate C_VPC_A
VPF -> C_VPC_A : startTestCycle
C_VPC_A -> C_VPC_A : initialize seed &\n reference date/time
note right of C_VPC_A #lightgreen: using system properties
VPF -> VPF : activateCreator(TestClassInitializationCreator)
VPF --> VPF_CR_A : TestClassInitializationCreator
T_A -> VPF : createRandomValueProvider
note left #lightgreen: static initialization\n@DataProvider method
VPF -> C_VPC_A : createRandomValueProvider

DPR -> T_B : class loading and\nexecution of @DataProvider methods
T_B -> VPF_CR_B : instantiation
activate VPF_CR_B #lightblue
VPF_CR_B -> VPF : startTestClassCycle
VPF -> C_VPC_B : instantiation
activate C_VPC_B
VPF -> C_VPC_B : startTestCycle
C_VPC_B -> C_VPC_B : initialize seed &\n reference date/time
note right of C_VPC_B #lightgreen: using system properties
VPF -> VPF : switchTestClassCreator(TestClassInitializationCreator)
VPF --> VPF_CR_B : TestClassInitializationCreator
T_B -> VPF : createRandomValueProvider
note left #lightgreen: static initialization\n@DataProvider method
VPF -> C_VPC_B : createRandomValueProvider

== Test A execution ==
DPR -> VPF_CR_A : starting
VPF_CR_A -> VPF : resumeTestClassCycle(TestClassInitializationCreator)
VPF -> VPF : switchTestClassCreator(TestClassInitializationCreator)
T_A -> VPF : createRandomValueProvider
note left #lightgreen: @BeforeClass method
VPF -> C_VPC_A : createRandomValueProvider

== Test A test method <1> ==
JVM --> T_A : instantiation for test method <1>
activate T_A
T_A -> VPF_MR_A : instantiation
activate VPF_MR_A #lightblue
VPF_MR_A -> VPF : startTestMethodCycle
VPF -> VPF : startTestMethodCycle
VPF -> VPF : activateCreator(TestMethodInitializationCreator)
VPF -> M_VPC : startTestCycle(TestClassInitializationCreator)
M_VPC -> M_VPC : initialize seed &\n reference date/time
note right of M_VPC #lightgreen: using system properties
M_VPC -> M_VPC : copyValueProviderSuffixes(TestClassInitializationCreator)
note right of M_VPC #lightgreen: required to ensure unique suffixes
M_VPC -> M_VPC : copyReferenceDateTime(TestClassInitializationCreator)
note right of M_VPC #lightgreen: required to ensure reproducible\ndate/time related test data

T_A -> VPF : createRandomValueProvider
note left #lightgreen: instance variables\n@Before method\ntest method
VPF -> M_VPC : createRandomValueProvider

T_A --> JVM : return
JVM -> VPF_MR_A : finish
VPF_MR_A -> VPF : finishTestMethodCycle
VPF -> M_VPC : finishTestCycle
M_VPC -> M_VPC : resetValueProviderSuffixes
VPF -> VPF : activateCreator(TestClassInitializationCreator)

JVM --> T_A : destruction for test method <1>
destroy VPF_MR_A
destroy T_A
newpage

== Test A test method <2> ==
JVM --> T_A : instantiation for test method <2>
activate T_A
T_A -> VPF_MR_A : instantiation
activate VPF_MR_A #lightblue
VPF_MR_A -> VPF : startTestMethodCycle
VPF -> VPF : startTestMethodCycle
VPF -> VPF : activateCreator(TestMethodInitializationCreator)
VPF -> M_VPC : startTestCycle(TestClassInitializationCreator)
M_VPC -> M_VPC : initialize seed &\n reference date/time
note right of M_VPC #lightgreen: using system properties
M_VPC -> M_VPC : copyValueProviderSuffixes(TestClassInitializationCreator)
note right of M_VPC #lightgreen: required to ensure unique suffixes
M_VPC -> M_VPC : copyReferenceDateTime(TestClassInitializationCreator)
note right of M_VPC #lightgreen: required to ensure reproducible\ndate/time related test data

T_A -> VPF : createRandomValueProvider
note left #lightgreen: instance variables\n@Before method\ntest method
VPF -> M_VPC : createRandomValueProvider

T_A --> JVM : return
JVM -> VPF_MR_A : finish
VPF_MR_A -> VPF : finishTestMethodCycle
VPF -> M_VPC : finishTestCycle
M_VPC -> M_VPC : resetValueProviderSuffixes
VPF -> VPF : activateCreator(TestClassInitializationCreator)

JVM --> T_A : destruction for test method <1>
destroy VPF_MR_A
destroy T_A
JVM -> VPF_CR_A : finished
VPF_CR_A -> VPF : finishTestClassCycle
VPF -> C_VPC_A : finishTestCycle
C_VPC_A -> C_VPC_A : resetValueProviderSuffixes
VPF -> VPF : delete TestClassInitializationCreator
destroy C_VPC_A
VPF -> VPF : activateCreator(DefaultInitializationCreator)
JVM --> VPF_CR_A
destroy VPF_CR_A
newpage

== Test B execution ==
DPR -> VPF_CR_B : starting
VPF_CR_B -> VPF : resumeTestClassCycle(TestClassInitializationCreator)
VPF -> VPF : activateTestClassCreator(TestClassInitializationCreator)
T_B -> VPF : createRandomValueProvider
note left #lightgreen: @BeforeClass method
VPF -> C_VPC_B : createRandomValueProvider

== Test B test method <1> ==
JVM --> T_B : instantiation for test method <1>
activate T_B
T_B -> VPF_MR_B : instantiation
activate VPF_MR_B #lightblue
VPF_MR_B -> VPF : startTestMethodCycle
VPF -> VPF : startTestMethodCycle
VPF -> VPF : activateCreator(TestMethodInitializationCreator)
VPF -> M_VPC : startTestCycle(TestClassInitializationCreator)
M_VPC -> M_VPC : initialize seed &\n reference date/time
note right of M_VPC #lightgreen: using system properties
M_VPC -> M_VPC : copyValueProviderSuffixes(TestClassInitializationCreator)
note right of M_VPC #lightgreen: required to ensure unique suffixes
M_VPC -> M_VPC : copyReferenceDateTime(TestClassInitializationCreator)
note right of M_VPC #lightgreen: required to ensure reproducible\ndate/time related test data

T_B -> VPF : createRandomValueProvider
note left #lightgreen: instance variables\n@Before method\ntest method
VPF -> M_VPC : createRandomValueProvider

T_B --> JVM : return
JVM -> VPF_MR_B : finish
VPF_MR_B -> VPF : finishTestMethodCycle
VPF -> M_VPC : finishTestCycle
M_VPC -> M_VPC : resetValueProviderSuffixes
VPF -> VPF : activateCreator(TestClassInitializationCreator)

JVM --> T_B : destruction for test method <1>
destroy VPF_MR_B
destroy T_B

... continued as shown above for Test A ...

@enduml