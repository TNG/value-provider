buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath 'com.github.jk1:gradle-license-report:1.16'
    }
}

plugins {
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0" apply true
}

def appAndSourceUrl = 'https://github.com/TNG/value-provider'

ext {
    app = [
            description: 'A library that facilitates writing realistic test data and in turn better tests for your Java application.',
            name       : 'value-provider',
            urls       : [
                    entry : appAndSourceUrl,
                    doc   : appAndSourceUrl,
                    issues: "${appAndSourceUrl}/issues",
                    source: appAndSourceUrl
            ],
            gitRepo    : 'git@github.com:TNG/value-provider.git',
            license    : [
                    name: 'The Apache Software License, Version 2.0',
                    url : 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            ]
    ]
    company = [
            name: 'TNG Technology Consulting GmbH',
            url : 'https://www.tngtech.com/'
    ]

    dependency = [
            apache_commons       : [group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'],
            guava                : [group: 'com.google.guava', name: 'guava', version: '30.1-jre'],
            slf4j                : [group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'],
            lombok               : [group: 'org.projectlombok', name: 'lombok', version: '1.18.20'],

            junit4               : [group: 'junit', name: 'junit', version: '4.13.1'],
            junit4_dataprovider  : [group: 'com.tngtech.junit.dataprovider', name: 'junit4-dataprovider', version: '2.7'],
            junit5_dataprovider  : [group: 'com.tngtech.junit.dataprovider', name: 'junit-jupiter-dataprovider', version: '2.7'],
            assertj_core         : [group: 'org.assertj', name: 'assertj-core', version: '3.19.0'],
            mockito              : [group: 'org.mockito', name: 'mockito-core', version: '3.7.7'],
            log4j_api            : [group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.16.0'],
            log4j_core           : [group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.16.0'],
            log4j_slf4j          : [group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.16.0'],

            junit4_engine        : [group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.7.0'],
            junit_platform_runner: [group: 'org.junit.platform', name: 'junit-platform-runner', version: '5.7.0'],
            junit_jupiter_api    : [group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.7.0'],
            junit_jupiter_engine : [group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.7.0'],
            junit_jupiter_params : [group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.7.0'],
            junit_jupiter_testkit: [group: 'org.junit.platform', name: 'junit-platform-testkit', version: '1.7.0']
    ]

    postfixedJar = { File jarFile, String postfix ->
        new File(jarFile.parentFile, jarFile.name.replaceAll(/\.jar$/, "-${postfix}.jar"))
    }

    tempJar = { File jarFile -> postfixedJar(jarFile, 'tmp') }

    productionProjects = [
            project(':core'),
            project(':example'),
            project(':junit4'),
            project(':junit5')]
    releaseProjects = [
            project(':core'),
            project(':junit4'),
            project(':junit5')]
    createModuleDescription = { description, proj -> "${description} - Module '${proj.name}'" }

    currentScriptRootOf = { it.buildscript.sourceFile.parentFile }
}

allprojects {
    group = 'com.tngtech.valueprovider'
    version = '1.0.2-SNAPSHOT'

    repositories {
        mavenCentral()
    }
}

task showJdkVersion {
    println "Configured JDK: ${JavaVersion.current()}"
}

task clean {
    doLast {
        project.buildDir.deleteDir()
    }
}

subprojects {
    apply plugin: 'java-library'
    compileJava { options.encoding = "UTF-8" }
    compileTestJava { options.encoding = "UTF-8" }

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    dependencies {
        implementation dependency.apache_commons
        implementation dependency.guava
        implementation dependency.slf4j

        testImplementation dependency.assertj_core
        testImplementation dependency.junit4
        testImplementation dependency.junit_jupiter_api

        testRuntimeOnly dependency.log4j_slf4j
        testRuntimeOnly dependency.log4j_api
        testRuntimeOnly dependency.log4j_core
    }

    repositories {
        mavenCentral()
    }

    test {
        useJUnitPlatform()
    }
}

ext.isReleaseVersion = !project.version.endsWith("-SNAPSHOT")

// respective username and password can be configured in ~/.gradle/gradle.properties
nexusPublishing {
    packageGroup = 'com.tngtech'
    repositories {
        sonatype {
            username = findProperty("sonatypeUsername")
            password = findProperty("sonatypePassword")
        }
    }
}
releaseProjects*.with {
    apply plugin: "maven-publish"
    apply plugin: "signing"

    tasks.withType(GenerateModuleMetadata) {
        enabled = false // the meta-data does not match the way the Maven artifacts are composed and thus is broken
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    // fix for broken java doc generation when using html tags in javadoc
    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }
    if (JavaVersion.current().isJava9Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addBooleanOption('html5', true)
            }
        }
    }

    project(":core") {
        archivesBaseName = 'value-provider-core'
        description = app.description
    }

    project(":junit4") {
        archivesBaseName = 'value-provider-junit4'
        description = 'JUnit 4 test infrastructure to reproduce random test data in case of test failures.'
    }

    project(":junit5") {
        archivesBaseName = 'value-provider-junit5'
        description = 'JUnit 5 test infrastructure to reproduce random test data in case of test failures.'
    }

    project(":example") {
        archivesBaseName = 'value-provider-example'
        description = 'Examples for test data factories using the value-provider library.'
    }

    tasks.withType(Jar) {
        from(rootProject.rootDir) {
            include("LICENSE", "NOTICE")
            into("META-INF")
        }

        manifest {
            def title = project.archivesBaseName
            def now = java.time.LocalDate.now()
            def today = now.format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd"))
            def companyName = company.name
            def copyright = "${now.year} ${companyName}"

            attributes(
                    'Built-By': "Gradle ${gradle.gradleVersion}",
                    'Built-Date': today,
                    'Specification-Title': project.archivesBaseName,
                    'Specification-Version': archiveVersion,
                    'Specification-Vendor': companyName,
                    'Implementation-Title': title,
                    'Implementation-Version': archiveVersion,
                    'Implementation-Vendor': company.name,
                    'Issue-Tracker': "https://github.com/TNG/value-provider/issues",
                    'Documentation-URL': "https://github.com/TNG/value-provider",
                    'Copyright': copyright,
                    'License': app.license.name,
            )
        }
    }
    tasks.withType(AbstractPublishToMaven) {
        it.dependsOn(build)
    }
    tasks.withType(PublishToMavenRepository) {
        it.doFirst {
            assert !gradle.startParameter.isParallelProjectExecutionEnabled():
                    'uploading archives with parallel execution seems to lead to broken uploads in Sonatype Nexus'
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = project.archivesBaseName
                from components.java
                pom {
                    name = project.archivesBaseName
                    packaging = "jar"
                    description = project.description
                    url = app.urls.entry

                    developers {
                        developer {
                            id = 'stefanhechtltng'
                            name = 'Stefan Hechtl'
                            email = 'stefan.hechtl@tngtech.com'
                        }
                        developer {
                            id = 'jonashoef'
                            name = 'Jonas HÃ¶f'
                            email = 'jonas.hoef@tngtech.com'
                        }
                    }

                    licenses {
                        license {
                            name = app.license.name
                            url = app.license.url
                            distribution = 'repo'
                        }
                    }

                    organization {
                        name = company.name
                        url = company.url
                    }

                    scm {
                        url = app.urls.source
                        connection = "scm:${app.gitRepo}"
                        developerConnection = "scm:${app.gitRepo}"
                    }
                }
            }
        }
    }

    signing {
        // requires gradle.properties, see http://www.gradle.org/docs/current/userguide/signing_plugin.html
        required {
            isReleaseVersion && gradle.taskGraph.hasTask('publish')
        }
        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.mavenJava
    }
}

apply plugin: 'com.github.jk1.dependency-license-report'