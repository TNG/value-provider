buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath 'com.github.jk1:gradle-license-report:2.9'
        // com.vanniktech.maven.publish plugin is not compatible with Java 8,
        // so the standard 'plugins {...}' approach can't be used, but the dependency must be controlled via a build property
        if (project.hasProperty('release')) {
            classpath "com.vanniktech.maven.publish:com.vanniktech.maven.publish.gradle.plugin:0.34.0"
        }

    }
}

def appAndSourceUrl = 'https://github.com/TNG/value-provider'

ext {
    app = [
            description: 'A library that facilitates writing realistic test data and in turn better tests for your Java application.',
            name       : 'value-provider',
            urls       : [
                    entry : appAndSourceUrl,
                    doc   : appAndSourceUrl,
                    issues: "${appAndSourceUrl}/issues",
                    source: appAndSourceUrl
            ],
            gitRepo    : 'git@github.com:TNG/value-provider.git',
            license    : [
                    name: 'The Apache Software License, Version 2.0',
                    url : 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            ]
    ]
    company = [
            name: 'TNG Technology Consulting GmbH',
            url : 'https://www.tngtech.com/'
    ]

    postfixedJar = { File jarFile, String postfix ->
        new File(jarFile.parentFile, jarFile.name.replaceAll(/\.jar$/, "-${postfix}.jar"))
    }

    tempJar = { File jarFile -> postfixedJar(jarFile, 'tmp') }

    productionProjects = [
            project(':core'),
            project(':example'),
            project(':junit4'),
            project(':junit5')]
    releaseProjects = [
            project(':core'),
            project(':junit4'),
            project(':junit5')]
    createModuleDescription = { description, proj -> "${description} - Module '${proj.name}'" }

    currentScriptRootOf = { it.buildscript.sourceFile.parentFile }
}

allprojects {
    group = 'com.tngtech.valueprovider'
    version = '1.4.3-SNAPSHOT'

    repositories {
        mavenCentral()
    }
}

task showJdkVersion {
    println "Configured JDK: ${JavaVersion.current()}"
}

task clean {
    doLast {
        project.buildDir.deleteDir()
    }
}

subprojects {
    apply plugin: 'java-library'
    compileJava { options.encoding = "UTF-8" }
    compileTestJava { options.encoding = "UTF-8" }

    sourceCompatibility = '17'
    targetCompatibility = '17'

    dependencies {
        implementation libs.guava
        implementation libs.slf4j.api

        testImplementation libs.apache.commons
        testImplementation libs.assertj.core
        testImplementation libs.junit4
        testImplementation libs.junit.jupiter.api

        // hint: activate (debug) logging via system property -Dorg.slf4j.simpleLogger.defaultLogLevel=debug
        testRuntimeOnly libs.slf4j.simple
    }

    repositories {
        mavenCentral()
    }

    test {
        useJUnitPlatform()
    }
}

ext.isReleaseVersion = !project.version.endsWith("-SNAPSHOT")

// duplication seems inevitable, as buildscript {...} does not support variables
def isReleaseBuild = project.hasProperty('release')

if (isReleaseBuild) {
    releaseProjects*.with {
        apply plugin: 'com.vanniktech.maven.publish'
        apply plugin: 'signing'

        tasks.withType(GenerateModuleMetadata) {
            enabled = false // the meta-data does not match the way the Maven artifacts are composed and thus is broken
        }

        // fix for broken java doc generation when using html tags in javadoc
        if (JavaVersion.current().isJava8Compatible()) {
            allprojects {
                tasks.withType(Javadoc) {
                    options.addStringOption('Xdoclint:none', '-quiet')
                }
            }
        }
        if (JavaVersion.current().isJava9Compatible()) {
            allprojects {
                tasks.withType(Javadoc) {
                    options.addBooleanOption('html5', true)
                }
            }
        }

        project(":core") {
            archivesBaseName = 'value-provider-core'
            description = app.description
        }

        project(":junit4") {
            archivesBaseName = 'value-provider-junit4'
            description = 'JUnit 4 test infrastructure to reproduce random test data in case of test failures.'
        }

        project(":junit5") {
            archivesBaseName = 'value-provider-junit5'
            description = 'JUnit 5 test infrastructure to reproduce random test data in case of test failures.'
        }

        project(":example") {
            archivesBaseName = 'value-provider-example'
            description = 'Examples for test data factories using the value-provider library.'
        }

        tasks.withType(Jar) {
            from(rootProject.rootDir) {
                include("LICENSE", "NOTICE")
                into("META-INF")
            }

            manifest {
                def title = project.archivesBaseName
                def now = java.time.LocalDate.now()
                def today = now.format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd"))
                def companyName = company.name
                def copyright = "${now.year} ${companyName}"

                attributes(
                        'Built-By': "Gradle ${gradle.gradleVersion}",
                        'Built-Date': today,
                        'Specification-Title': project.archivesBaseName,
                        'Specification-Version': archiveVersion,
                        'Specification-Vendor': companyName,
                        'Implementation-Title': title,
                        'Implementation-Version': archiveVersion,
                        'Implementation-Vendor': company.name,
                        'Issue-Tracker': "https://github.com/TNG/value-provider/issues",
                        'Documentation-URL': "https://github.com/TNG/value-provider",
                        'Copyright': copyright,
                        'License': app.license.name,
                )
            }
        }
        tasks.withType(AbstractPublishToMaven) {
            it.dependsOn(build)
        }
        tasks.withType(PublishToMavenRepository) {
            it.doFirst {
                assert !gradle.startParameter.isParallelProjectExecutionEnabled():
                        'uploading archives with parallel execution seems to lead to broken uploads in Maven Central'
            }
        }

        mavenPublishing {
            // true -> automatically publish after uploading
            publishToMavenCentral(true)
            signAllPublications()

            coordinates(
                    project.group,
                    project.archivesBaseName,
                    project.version.toString()
            )

            pom {
                name = project.archivesBaseName
                packaging = "jar"
                description = project.description
                url = app.urls.entry

                developers {
                    developer {
                        id = 'stefanhechtltng'
                        name = 'Stefan Hechtl'
                        email = 'stefan.hechtl@tngtech.com'
                    }
                    developer {
                        id = 'jonashoef'
                        name = 'Jonas HÃ¶f'
                        email = 'jonas.hoef@tngtech.com'
                    }
                }

                licenses {
                    license {
                        name = app.license.name
                        url = app.license.url
                        distribution = 'repo'
                    }
                }

                organization {
                    name = company.name
                    url = company.url
                }

                scm {
                    url = app.urls.source
                    connection = "scm:${app.gitRepo}"
                    developerConnection = "scm:${app.gitRepo}"
                }
            }
        }

        signing {
            // requires gradle.properties, see http://www.gradle.org/docs/current/userguide/signing_plugin.html
            required {
                isReleaseVersion
            }
            def signingKey = findProperty("signingKey")
            def signingPassword = findProperty("signingPassword")
            useInMemoryPgpKeys(signingKey, signingPassword)
        }
    }
}
apply plugin: 'com.github.jk1.dependency-license-report'
